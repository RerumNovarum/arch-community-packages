diff -rup luxrender-lux-008805644181/core/film.cpp luxrender-lux-008805644181.new/core/film.cpp
--- luxrender-lux-008805644181/core/film.cpp	2012-06-02 08:40:33.000000000 +0200
+++ luxrender-lux-008805644181.new/core/film.cpp	2012-07-07 15:44:59.867492295 +0200
@@ -618,7 +618,7 @@ Film::Film(u_int xres, u_int yres, Filte
 	int yRealHeight = Floor2Int(yPixelStart + .5f + yPixelCount + filter->yWidth) - Floor2Int(yPixelStart + .5f - filter->yWidth);
 	samplePerPass = xRealWidth * yRealHeight;
 
-	boost::xtime_get(&creationTime, boost::TIME_UTC);
+	boost::xtime_get(&creationTime, boost::TIME_UTC_);
 
 	//Queryable parameters
 	AddIntAttribute(*this, "xResolution", "Horizontal resolution (pixels)", &Film::GetXResolution);
@@ -855,7 +855,7 @@ void Film::AddSampleCount(float count) {
 	if (haltTime > 0) {
 		// Check if we have met the enough rendering time condition
 		boost::xtime t;
-		boost::xtime_get(&t, boost::TIME_UTC);
+		boost::xtime_get(&t, boost::TIME_UTC_);
 		if (t.sec - creationTime.sec > haltTime)
 			enoughSamplesPerPixel = true;
 	}
diff -rup luxrender-lux-008805644181/core/photonmap.cpp luxrender-lux-008805644181.new/core/photonmap.cpp
--- luxrender-lux-008805644181/core/photonmap.cpp	2012-06-02 08:40:33.000000000 +0200
+++ luxrender-lux-008805644181.new/core/photonmap.cpp	2012-07-07 15:44:59.870825579 +0200
@@ -474,13 +474,13 @@ void PhotonMapPreprocess(const RandomGen
 
 	boost::xtime photonShootingStartTime;
 	boost::xtime lastUpdateTime;
-	boost::xtime_get(&photonShootingStartTime, boost::TIME_UTC);
-	boost::xtime_get(&lastUpdateTime, boost::TIME_UTC);
+	boost::xtime_get(&photonShootingStartTime, boost::TIME_UTC_);
+	boost::xtime_get(&lastUpdateTime, boost::TIME_UTC_);
 	u_int nshot = 0;
 	while ((!radianceDone || !directDone || !causticDone || !indirectDone) && !scene.terminated) {
 		// Dade - print some progress information
 		boost::xtime currentTime;
-		boost::xtime_get(&currentTime, boost::TIME_UTC);
+		boost::xtime_get(&currentTime, boost::TIME_UTC_);
 		if (currentTime.sec - lastUpdateTime.sec > 5) {
 			ss.str("");
 			ss << "Photon shooting progress: Direct[" << directPhotons.size();
@@ -686,7 +686,7 @@ void PhotonMapPreprocess(const RandomGen
 		return;
 
 	boost::xtime photonShootingEndTime;
-	boost::xtime_get(&photonShootingEndTime, boost::TIME_UTC);
+	boost::xtime_get(&photonShootingEndTime, boost::TIME_UTC_);
 	LOG(LUX_INFO,LUX_NOERROR) << "Photon shooting done (" << ( photonShootingEndTime.sec - photonShootingStartTime.sec ) << "s)";
 
 	if (computeRadianceMap) {
@@ -700,7 +700,7 @@ void PhotonMapPreprocess(const RandomGen
 		for (u_int i = 0; i < radiancePhotons.size(); ++i) {
 			// Dade - print some progress info
 			boost::xtime currentTime;
-			boost::xtime_get(&currentTime, boost::TIME_UTC);
+			boost::xtime_get(&currentTime, boost::TIME_UTC_);
 			if (currentTime.sec - lastUpdateTime.sec > 5) {
 				LOG(LUX_INFO,LUX_NOERROR) << "Radiance photon map computation progress: " << i << " (" << (100 * i / radiancePhotons.size()) << "%)";
 
@@ -740,7 +740,7 @@ void PhotonMapPreprocess(const RandomGen
 
 
 		boost::xtime radianceComputeEndTime;
-		boost::xtime_get(&radianceComputeEndTime, boost::TIME_UTC);
+		boost::xtime_get(&radianceComputeEndTime, boost::TIME_UTC_);
 		LOG(LUX_INFO,LUX_NOERROR) << "Radiance photon map computed (" << ( radianceComputeEndTime.sec - photonShootingEndTime.sec ) << "s)";
 	}
 
diff -rup luxrender-lux-008805644181/core/renderfarm.cpp luxrender-lux-008805644181.new/core/renderfarm.cpp
--- luxrender-lux-008805644181/core/renderfarm.cpp	2012-06-02 08:40:33.000000000 +0200
+++ luxrender-lux-008805644181.new/core/renderfarm.cpp	2012-07-07 15:44:59.870825579 +0200
@@ -100,7 +100,7 @@ void FilmUpdaterThread::updateFilm(FilmU
 	// Dade - thread to update the film with data from servers
 
 	boost::xtime reft;
-	boost::xtime_get(&reft, boost::TIME_UTC);
+	boost::xtime_get(&reft, boost::TIME_UTC_);
 
 	while (filmUpdaterThread->signal == SIG_NONE) {
 		// Dade - check signal every 1 sec
@@ -108,7 +108,7 @@ void FilmUpdaterThread::updateFilm(FilmU
 		for(;;) {
 			// Dade - sleep for 1 sec
 			boost::xtime xt;
-			boost::xtime_get(&xt, boost::TIME_UTC);
+			boost::xtime_get(&xt, boost::TIME_UTC_);
 			xt.sec += 1;
 			boost::thread::sleep(xt);
 
diff -rup luxrender-lux-008805644181/film/fleximage.cpp luxrender-lux-008805644181.new/film/fleximage.cpp
--- luxrender-lux-008805644181/film/fleximage.cpp	2012-06-02 08:40:33.000000000 +0200
+++ luxrender-lux-008805644181.new/film/fleximage.cpp	2012-07-07 15:44:59.877492150 +0200
@@ -191,7 +191,7 @@ FlexImageFilm::FlexImageFilm(u_int xres,
 	m_CameraResponseEnabled = d_CameraResponseEnabled = m_CameraResponseFile != "";
 
 	// init timer
-	boost::xtime_get(&lastWriteImageTime, boost::TIME_UTC);
+	boost::xtime_get(&lastWriteImageTime, boost::TIME_UTC_);
 	lastWriteFLMTime = lastWriteImageTime;
 }
 
@@ -812,7 +812,7 @@ void FlexImageFilm::CheckWriteOuputInter
 {
 	// Check write output interval
 	boost::xtime currentTime;
-	boost::xtime_get(&currentTime, boost::TIME_UTC);
+	boost::xtime_get(&currentTime, boost::TIME_UTC_);
 	bool timeToWriteImage = (currentTime.sec - lastWriteImageTime.sec > writeInterval);
 	bool timeToWriteFLM = (currentTime.sec - lastWriteFLMTime.sec > flmWriteInterval);
 
@@ -834,7 +834,7 @@ void FlexImageFilm::CheckWriteOuputInter
 	// WriteImage can take a very long time to be executed (i.e. by saving
 	// the film. It is better to refresh timestamps after the
 	// execution of WriteImage instead than before.
-	boost::xtime_get(&currentTime, boost::TIME_UTC);
+	boost::xtime_get(&currentTime, boost::TIME_UTC_);
 
 	if (timeToWriteImage)
 		lastWriteImageTime = currentTime;
diff -rup luxrender-lux-008805644181/renderers/sppmrenderer.h luxrender-lux-008805644181.new/renderers/sppmrenderer.h
--- luxrender-lux-008805644181/renderers/sppmrenderer.h	2012-06-02 08:40:33.000000000 +0200
+++ luxrender-lux-008805644181.new/renderers/sppmrenderer.h	2012-07-07 15:44:59.874158864 +0200
@@ -126,7 +126,7 @@ public:
 	{
 		while (state == PAUSE && !boost::this_thread::interruption_requested()) {
 			boost::xtime xt;
-			boost::xtime_get(&xt, boost::TIME_UTC);
+			boost::xtime_get(&xt, boost::TIME_UTC_);
 			xt.sec += 1;
 			boost::thread::sleep(xt);
 		}
